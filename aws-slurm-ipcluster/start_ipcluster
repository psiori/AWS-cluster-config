#!/usr/bin/env bash
LOGD="$HOME/.start_ipcluster"

function check_zero {
    if ! [[ "$1" =~ ^[0-9]+$ ]]; then
        echo 0
    else
        echo $1
    fi
}

function get_pending {
    pend=$(/opt/slurm/bin/squeue -r -h -o '%t %D' | awk '$1 == "PD" { total = total + 1} END {print total}')
    echo $( check_zero "$pend" )
}

function get_running {
    runn=$(/opt/slurm/bin/squeue -r -h -o '%t %D' | awk '$1 == "R" { total = total + 1} END {print total}')
    echo $( check_zero "$runn" )
}

function clearline {
    tput cuu 1 && tput el
}

USAGE="Start ipcluster with N workers (N>=1).

Usage: $(basename $0) N"

# check that the only argument we get is an integer
if ! [[ "$1" =~ ^[0-9]+$ ]] ; then
    echo "$USAGE"
    exit 1
fi

# create a log directory
mkdir -p "$LOGD"
# link here the logs directory for the ipcluster
/bin/rm -f "$LOGD/ipcluster-logs"
/bin/ln -s "$HOME"/.ipython/profile_default/log "$LOGD/ipcluster-logs"


echo "Starting jupyter notebook..."
jupyter notebook --no-browser >& "$LOGD"/jupyter-notebook.log &
sleep 5
LINK=$(jupyter notebook list | grep http | cut -d ' ' -f 1)
if [ -z "$LINK" ]; then
    echo "Could not start jupyter notebook!"
    exit 1
fi
echo "You can connect to the notebook on your local machine by pointing a browser to:"
echo "$LINK"

echo "Starting workers..."
# start the controller and the first worker
ipcluster start -n 1 --daemonize
# now start all other needed workers in a loop
for worker in $(seq 1 $(( $1 - 1 )) ); do
    ipcluster engines --n=1 --daemonize
done

sleep 5
# now monitor slurm queue and give feedback
pending=$(get_pending)
running=$(get_running)

START=$(date +%s)
while [ "$pending" -ne 0 ]; do
    # check that pending+running == N, otherwise something is broken...
    if [ $(( $pending + $running )) -ne $1 ]; then
        echo "Unexpected error. Exit!"
        exit 1
    fi
    WAITTIME=$(( $(date +%s) - $START ))
    echo "AWS AutoScaling: $running workers running, $pending workers pending [elapsed: $WAITTIME s]"
    sleep 5
    clearline
    pending=$(get_pending)
    running=$(get_running)
done
echo "All workers have been started [elapsed: $WAITTIME s]!"
